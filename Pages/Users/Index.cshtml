@page
@model task.Pages_Users.IndexModel

@{
    ViewData["Title"] = "Index";
}

<h1>Dashboard</h1>

<p>
    <button id="createNew" class="btn btn-primary">Create New</button>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.User[0].Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.User[0].DOB)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.User[0].Cource)
            </th>
            <th>Image</th>
            <th></th>
        </tr>
    </thead>
    <tbody id="userList">
@foreach (var item in Model.User) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.DOB)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Cource)
            </td>
            <td>
                <!-- Image element for displaying user image -->
                <img id="userImage-@item.Id" src="/images/@item.ImageFilename" alt="User Image" style="width: 100px; height: 100px;">
            </td>
            <td>
                <button class="editButton btn btn-link" data-id="@item.Id">Edit</button> |
                <button class="detailsButton btn btn-link" data-id="@item.Id">Details</button> |
                <form method="post" asp-page-handler="Delete" asp-route-id="@item.Id" style="display:inline;">
                    <button type="submit" class="btn btn-link">Delete</button>
                </form>
                <!-- Separate form for image upload -->
                <form id="uploadImageForm-@item.Id" onsubmit="uploadImage(event, '@item.Id')" enctype="multipart/form-data">
                    <input type="file" id="fileInput-@item.Id" name="file">
                    <button type="submit" class="btn btn-primary">Upload Image</button>
                </form>
            </td>
        </tr>
}
    </tbody>
</table>

<!-- Add an element to display the upload result -->
<div id="uploadResult"></div>

<div id="modalContainer"></div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <!-- Popper.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
    <!-- Bootstrap JS -->
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script>
        $(document).ready(function () {
            // Load Create Page
            $('#createNew').on('click', function () {
                $.get('@Url.Page("Create")', function (data) {
                    $('#modalContainer').html(data);
                    $('#createModal').modal('show');
                });
            });

            // Load Edit Page
            $('.editButton').on('click', function () {
                const id = $(this).data('id');
                $.get('@Url.Page("Edit")', { id: id }, function (data) {
                    $('#modalContainer').html(data);
                    $('#editModal').modal('show');
                });
            });

            // Load Details Page
            $('.detailsButton').on('click', function () {
                const id = $(this).data('id');
                $.get('@Url.Page("Details")', { id: id }, function (data) {
                    $('#modalContainer').html(data);
                    $('#detailsModal').modal('show');
                });
            });

            // Handle Delete
            $('.deleteButton').on('click', function () {
                const id = $(this).data('id');
                $.ajax({
                    url: '@Url.Page("/Users", "Delete")',
                    type: 'POST',
                    data: JSON.stringify({ id: id }),
                    contentType: 'application/json; charset=utf-8',
                    success: function () {
                        location.reload();
                    },
                    error: function (xhr, status, error) {
                        console.error("Delete failed:", xhr.responseText);
                    }
                });
            });
        });

        function getBase64(file, callback) {
            const reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onload = function () {
                callback(reader.result.split(',')[1]); // Get only the base64 string, without the data prefix
            };
            reader.onerror = function (error) {
                console.log('Error: ', error);
            };
        }

        function uploadImage(event, userId) {
        event.preventDefault();
        const fileInput = document.getElementById(`fileInput-${userId}`);
        const file = fileInput.files[0];
        if (file) {
            getBase64(file, function(base64String) {
                fetch('/api/users/upload/base64', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ base64Image: base64String, userId: userId }) // Include the userId in the request
                })
                .then(response => response.json())
                .then(data => {
                    document.getElementById('uploadResult').innerText = data.message;
                    if (data.imagePath) {
                        // Update the image source for the specific user
                        document.getElementById(`userImage-${userId}`).src = data.imagePath;
                    }
                })
                .catch(error => console.error('Error:', error));
            });
        }
    }

    </script>
}
